Phase 1 : Côté client (frontend) dans la HomePage
    * Réponse à l'action de l'utilisateur
        - Sur la HomePage l'utilisateur clique sur un bouton "Se connecter avec Google".
        - Le code JavaScript (TypeScript) de la HomePage intercepte cet événement.

    * Préparation de la requête
        - Le code de la HomePage génère un 'state' aléatoire et unique (ex: crypto.randomUUID()) pour se protéger des attaques CSRF.
        - Stockage immédiat de 'state' dans le sessionStorage.

    * Construction de l'URL d'authentification pour l'API Google
        - Le code de la HomePage concatène l'URL de base (https://accounts.google.com/o/oauth2/v2/auth) avec des paramètres de requête:
            - response_type=code : Indique que vous attendez un code d'autorisation en retour.
            - client_id=VOTRE_CLIENT_ID : L'identifiant de votre application, obtenu auprès de Google.
            - redirect_uri=VOTRE_CALLBACK_URL : L'URL où Google doit renvoyer l'utilisateur.
            - scope=email%20profile : Les informations demandé à l'utilisateur (email, profil public).
            - state=VOTRE_VALEUR_DE_STATE : La valeur que vous venez de générer.

    * Ouverture de la fenêtre pop-up
        - Le code de la HomePage ouvre la pop-up en utilisant window.open(), en lui passant l'URL precedement construite.
        - La nouvelle fenêtre charge cette URL et affiche le formulaire de connexion de Google.

Phase 2 : Côté PopUp sur la page Google (fournisseur d'identité)
    * Authentification et consentement
        - L’utilisateur saisit ses identifiants et accepte de partager ses infos.

    * Redirection le `redirect_uri`
        - Une fois que l'authentification et le consentement sont réussis, Google envoie une réponse de redirection HTTP (code 302).
        - Cette réponse ordonne au navigateur de la pop-up de charger une nouvelle URL. Cette URL est le `redirect_uri` (ex: https://votrejeu.com/auth/popup-callback), mais elle contient en plus:
            - le code d'autorisation (usage unique, expire rapidement)
            - le state (le meme que celui envoye precedement).

Phase 3 : Côté PopUp sur la page de redirection
    * Réception du code sur la pop-up
        - La pop-up charge la page auth/popup-callback. Le code JavaScript de cette page s'exécute:
            - Extaction du code d'autorisation et du state de l'URL.
            - Preparation du message avec le code d'autorisation et le state.
            - utilisation window.opener.postMessage() pour envoyer le message préparé à la fenêtre qui l'a ouverte. L'origine de la page principale est incluse dans l'appel pour des raisons de sécurité.
        - La pop-up se ferme.

Phase 4 : Côté client (frontend) dans la HomePage
    * Vérification de sécurité
        - La HomePage, en écoutant l'événement message, reçoit le message de la pop-up.
        - La HomePage compare le state reçu dans le message avec le state stocké dans le sessionStorage. Si les valeurs correspondent, la vérification est un succès. La page principale peut faire confiance au code d'autorisation.
    * Transmission au backend
        - La HomePage envoie ce code au microservice d'authentification (backend) via une requête API POST (pas GET) et HTTPS, pour éviter qu’il ne soit logged dans les historiques ou les logs serveur.

Phase 5 : Côté serveur (backend)
    * Échange de code et création de la session
        - Le backend reçoit le code d'autorisation du frontend.
        - Le backend envoi le code d'autorisation a Google via une requête sécurisée de serveur à serveur.
        - Google renvoie:
            - ID Token → contient les infos d’identité de l’utilisateur (nom, email, etc.), signé par Google.
            - Access Token → permet d’accéder aux API Google.
            - Refresh Token (optionnel) → permet d’obtenir un nouvel access token sans redemander la connexion à l’utilisateur.
        - Le backend valide l'identité de l'utilisateur à partir de l'ID Token et crée une session pour l'utilisateur dans votre système.
        - Le backend genere un jeton de session interne (JWT) et l'envoi en reponse au frontend pour finaliser le processus d'authentification.
