{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "errNotOwner",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "id",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "data",
						"type": "string"
					}
				],
				"name": "BroadcastTournament",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "id",
						"type": "uint64"
					}
				],
				"name": "getTournament",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint64",
								"name": "id",
								"type": "uint64"
							},
							{
								"internalType": "string",
								"name": "data",
								"type": "string"
							}
						],
						"internalType": "struct Tournament.TournamentScore",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "id",
						"type": "uint64"
					},
					{
						"internalType": "string",
						"name": "data",
						"type": "string"
					}
				],
				"name": "registerTournament",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tournamentCount",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "scraeyme",
			"events": {
				"BroadcastTournament(uint64,string)": {
					"details": "The keyword emit is used in registerTournament() which calls for this event"
				}
			},
			"kind": "dev",
			"methods": {
				"getTournament(uint64)": {
					"params": {
						"id": "Index of the tournament to get (max: count - 1)"
					}
				},
				"registerTournament(uint64,string)": {
					"details": "Can only be called by the one who created the contract",
					"params": {
						"data": "Score and Names of the players"
					}
				}
			},
			"title": "Contract that registers tournament scores to the blockchain",
			"version": 1
		},
		"userdoc": {
			"events": {
				"BroadcastTournament(uint64,string)": {
					"notice": "This is why the major module is validated, it registers the scores to the blockchain"
				}
			},
			"kind": "user",
			"methods": {
				"getTournament(uint64)": {
					"notice": "Get a tournament score by index"
				},
				"registerTournament(uint64,string)": {
					"notice": "Registers a tournament's score"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Tournament.sol": "Tournament"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Tournament.sol": {
			"keccak256": "0xe7fefa2f34440e9ef8e9f1cb47aae8db6f85a9c227cce1a3af8933cde72eb8d0",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b1f67cddcc662fac14de256cd34a05fa265edf5f9e549b45bef8292bf9f0ada2",
				"dweb:/ipfs/QmSSf8fACwJWEE8aWVCqLBeYysJDxqJVFzm2mrMmHzGeFx"
			]
		}
	},
	"version": 1
}
